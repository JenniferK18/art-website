{"version":3,"sources":["assets/banner-photo.jpeg","components/Home.js","components/Gallery.js","components/Pricing.js","components/About.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Gallery","Pricing","About","className","NavBar","to","exact","path","App","src","banner","style","width","height","objectFit","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,2C,sICQ5BC,MANf,WACE,OACE,yCCOWC,MATf,WACE,OACE,kBAAC,WAAD,KACI,2CACA,+CCKOC,MATf,WACE,OACE,kBAAC,WAAD,KACI,2CACA,+CCKOC,MATf,WACE,OACE,yBAAKC,UAAU,QACX,4BAAQA,UAAU,eAAlB,YACA,yBAAKA,UAAU,aAAf,wBCoCOC,MA3Bf,WACE,OACE,kBAAC,IAAD,KACI,4BAAQD,UAAU,gCACd,kBAAC,IAAD,CAAME,GAAG,KAAI,0BAAMF,UAAU,+BAAhB,SACb,kBAAC,IAAD,CAAME,GAAG,YAAW,0BAAMF,UAAU,+BAAhB,YACpB,kBAAC,IAAD,CAAME,GAAG,YAAW,0BAAMF,UAAU,+BAAhB,YACpB,kBAAC,IAAD,CAAME,GAAG,UAAS,0BAAMF,UAAU,+BAAhB,cAEtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAAC,EAAD,U,iBChBCC,MAdf,WACE,OACE,kBAAC,WAAD,KACE,yBACEC,IAAKC,IACLC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,IAAKC,UAAW,SAChDC,IAAI,GACJZ,UAAU,cAEZ,kBAAC,EAAD,QCFca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7cbbc2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner-photo.4c96d3a8.jpeg\";","import React from 'react';\r\n\r\nfunction Home() {\r\n  return (\r\n    <header>Home</header>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Fragment } from 'react';\r\n\r\nfunction Gallery() {\r\n  return (\r\n    <Fragment>\r\n        <header>Gallery</header>\r\n        <div>Gallery body</div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Fragment } from 'react';\r\n\r\nfunction Pricing() {\r\n  return (\r\n    <Fragment>\r\n        <header>Pricing</header>\r\n        <div>Pricing body</div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Pricing;\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"card\">\r\n        <header className=\"card-header\">About me</header>\r\n        <div className=\"card-body\">About me body text</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\n//import Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import '../css/index.css'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Home from './Home';\r\nimport Gallery from './Gallery';\r\nimport Pricing from './Pricing';\r\nimport About from './About';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Router>\r\n        <header className=\"navbar navbar-expand bg-dark\">\r\n            <Link to=\"/\"><span className=\"bg-dark text-white nav-link\">Home</span></Link>\r\n            <Link to=\"/gallery\"><span className=\"bg-dark text-white nav-link\">Gallery</span></Link>\r\n            <Link to=\"/pricing\"><span className=\"bg-dark text-white nav-link\">Pricing</span></Link>\r\n            <Link to=\"/about\"><span className=\"bg-dark text-white nav-link\">About me</span></Link>\r\n        </header>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n              <Home />\r\n          </Route>\r\n          <Route path=\"/gallery\">\r\n              <Gallery />\r\n          </Route>\r\n          <Route path=\"/pricing\">\r\n              <Pricing />\r\n          </Route>\r\n          <Route path=\"/about\">\r\n              <About />\r\n          </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './components/NavBar';\nimport banner from './assets/banner-photo.jpeg';\n\nfunction App() {\n  return (\n    <Fragment>\n      <img \n        src={banner}\n        style={{ width: '100%', height: 300, objectFit: 'cover' }}\n        alt=\"\"\n        className=\"img-fluid\"\n      />\n      <NavBar />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}